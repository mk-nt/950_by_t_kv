neo <- readDiscreteCharacterData("project950.neo.nex")
trans <- readDiscreteCharacterData("project950.trans.nex")
logFile = "950_by_t_kv.log"
paramFile = "950_by_t_kv.p.log"
treeFile = "950_by_t_kv.trees"
ckpFile = "950_by_t_kv.ckp"
source("by_t_kv.Rev")

monitors.append( mnModel(filename = logFile, printgen = 36) )
monitors.append( mnModel(filename = paramFile, printgen = 6, stochasticOnly = TRUE, exclude = ["rel_br_lengths"]) )
monitors.append( mnFile(filename = treeFile, printgen = 12, phylogeny) )

mymc3 = mcmcmc(
  mymodel, monitors, moves,
  nruns = 2,
  nchains = 8,
  tuneHeat = TRUE,
  swapMethod = "both",
  swapMode = "multiple",
  combine = "none"
)
print("  - Created MCMCMC object")

checkFreq = 100

if (fileExists("950_by_t_kv_run_1_chain_0.ckp")) {
  print("  - Initializing from checkpoint")
  mymc3.initializeFromCheckpoint(ckpFile)
} else {
  mymc3.burnin(generations = 3000, tuningInterval = checkFreq * 3)
}

stopping_rules[1] = srMaxTime(71, "hours")
# Overshoot ESS slightly as calculations may differ
stopping_rules[2] = srMinESS(333, paramFile, checkFreq)
# PSRF stopping rule seems never to trigger in rb1.2.4. Omit.
# stopping_rules[3] = srGelmanRubin(1.01, paramFile, checkFreq)

print("  - Commencing MCMCMC run")
mymc3.run(rules = stopping_rules, checkpointFile = ckpFile, checkpointInterval = checkFreq)

print("  # # # RUN COMPLETE # # #  ")
q()
